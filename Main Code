import sys
from PyQt5.QtWidgets import (
    QApplication,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QLineEdit,
    QPushButton,
    QListWidget,
    QScrollBar,
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont


class StyledScrollBar(QScrollBar):
    def __init__(self):
        super().__init__()

        self.setStyleSheet(
            """
            QScrollBar:vertical {
                border: 2px solid #555;
                background: #333;
                width: 12px;
                margin: 0px 0px 0px 0px;
            }

            QScrollBar::handle:vertical {
                background: #555;
                min-height: 20px;
            }

            QScrollBar::add-line:vertical {
                height: 0px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
            }

            QScrollBar::sub-line:vertical {
                height: 0px;
                subcontrol-position: top;
                subcontrol-origin: margin;
            }
            """
        )


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        self.init_ui()
        self.load_tasks()

    def init_ui(self):
        main_layout = QVBoxLayout(self)

        self.task_list = QListWidget(self)
        self.task_list.setFont(QFont("Arial", 12))
        self.task_list.setStyleSheet(
            "QListWidget { background-color: #333; color: white; border-radius: 10px; }"
        )
        self.task_list.setVerticalScrollBar(StyledScrollBar())  # Set custom scrollbar
        main_layout.addWidget(self.task_list)

        self.task_entry = QLineEdit(self)
        self.task_entry.setFont(QFont("Arial", 12))
        self.task_entry.setStyleSheet(
            "QLineEdit { background-color: #333; color: white; border-radius: 5px; }"
        )
        self.task_entry.returnPressed.connect(
            self.add_task
        )  # Connect Enter key to add_task
        main_layout.addWidget(self.task_entry)

        button_layout = QHBoxLayout()

        add_button = QPushButton("Add Task", self)
        add_button.clicked.connect(self.add_task)
        add_button.setMinimumHeight(40)
        add_button.setStyleSheet(
            "QPushButton { background-color: #555; color: white; border-radius: 5px; }"
        )
        button_layout.addWidget(add_button)

        remove_button = QPushButton("Remove Task", self)
        remove_button.clicked.connect(self.remove_task)
        remove_button.setMinimumHeight(40)
        remove_button.setStyleSheet(
            "QPushButton { background-color: #555; color: white; border-radius: 5px; }"
        )
        button_layout.addWidget(remove_button)

        main_layout.addLayout(button_layout)

        self.setGeometry(100, 100, 400, 400)
        self.setWindowTitle("To-Do List V2")
        self.setStyleSheet(
            "QWidget { background-color: #222; color: white; border-radius: 10px; }"
        )

        # Set fixed size policy
        self.setFixedSize(self.size())

        # Set selection mode to MultiSelection
        self.task_list.setSelectionMode(QListWidget.MultiSelection)

        self.show()

    def add_task(self):
        task = self.task_entry.text()
        if task:
            task_with_bullet = "â€¢ " + task  # Add a bullet point
            self.task_list.addItem(task_with_bullet)
            self.task_entry.clear()
            self.save_tasks()

    def remove_task(self):
        selected_indexes = self.task_list.selectedIndexes()
        for index in selected_indexes:
            self.task_list.takeItem(index.row())
        self.save_tasks()

    def save_tasks(self):
        tasks = [self.task_list.item(i).text() for i in range(self.task_list.count())]
        with open("tasks.txt", "w") as file:
            file.write("\n".join(tasks))

    def load_tasks(self):
        try:
            with open("tasks.txt", "r") as file:
                tasks = file.read().splitlines()
                for task in tasks:
                    self.task_list.addItem(task)
        except FileNotFoundError:
            pass


def main():
    app = QApplication(sys.argv)
    ex = MainWindow()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
